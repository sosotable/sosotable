import Head from 'next/head'
import Image from 'next/image'
import { Inter } from '@next/font/google'
import styles from '@/styles/Home.module.css'
import Box from '@mui/material/Box';
import Typography from '@mui/material/Typography';
import {useRouter} from 'next/router'
import { useAppDispatch, useAppSelector, setInfo, addTag, increaseTagCount } from "@/components/store";
import {Badge, Chip, Divider, IconButton, InputBase, Paper} from "@mui/material";
import {Menu, Search, Directions, Favorite, Face} from "@mui/icons-material";
import MiniDrawer from "@/components/drawer";
import {useRef, useState} from "react";
import MainModal from "@/components/modal/mainModal";
import * as React from "react";

import FavoriteIcon from "@mui/icons-material/Favorite";
import StarRateIcon from "@mui/icons-material/StarRate";
import SentimentSatisfiedAltIcon from "@mui/icons-material/SentimentSatisfiedAlt";
import SentimentVeryDissatisfiedIcon from "@mui/icons-material/SentimentVeryDissatisfied";

const inter = Inter({ subsets: ['latin'] })

interface Info {
    id: string,
    password: string,
    nickname: string,
    tag: []
}

export default function Home() {
    const router = useRouter()
    const dispatch = useAppDispatch()
    const info: any | Info = useAppSelector(state => state.userInfo)
    const [inputs, setInputs] = useState({
        name: '',
        icon: '',
        count: 1
    })
    const {name, icon, count} = inputs;

    const [chipsName, setChipsName] = useState('');
    const [icons, setIcons] = useState('');
    const [chips, setChips] = useState([
        {
            id: 1,
            name: 'a',
            icon: '',
            count: 1
        },
        {
            id: 2,
            name: 'b',
            icon: '',
            count: 1
        },
        {
            id: 3,
            name: 'c',
            icon: '',
            count: 1
        },
    ]);
    const nextId = useRef(4);

    // @ts-ignore
    const onChange = (e) => {
        const {name, value} = e.target;
        setInputs({
            ...inputs,
            [name]: value,
        });
    };

    // @ts-ignore
    const onCreateChip = (name, icon) => {
        const chip = {
            id: nextId.current,
            name: name,
            icon: icon,
            count
        };

        setChips([...chips, chip]);

        setInputs({
            name: "",
            icon: "",
            count: 1
        });
        nextId.current += 1;
        setIcons('');
    };


    const onIncrease = (index: number) => {
        let copyArray = [...chips]
        let copyCount = chips[index].count
        copyArray[index] = {...copyArray[index], count: copyCount + 1}
        setChips(copyArray)
    };

    // @ts-ignore
    const onRemove = id => {
        setChips(chips.filter(chip => chip.id !== id));
    };

    // @ts-ignore
    const handleIconClick = (id, icon) => {
        setIcons(icon);
    };


    const handleClick = (...rest: any[]) => {
        const index = rest[0]
        onIncrease(index)
        console.info('clicked', index, chips[index].count)
        // dispatch(increaseTagCount(index))
    };

    const handleDelete = (...rest: any[]) => {
        const id = rest[0]
        console.info('You clicked the delete icon.');
        onRemove(id)
    };

    const iconsList = [
        {id: 1, name: "Favorate", icon: <FavoriteIcon />},
        {id: 2, name: "StarRate", icon: <StarRateIcon />},
        {id: 3, name: "SentimentSatisfiedAlt", icon: <SentimentSatisfiedAltIcon />},
        {id: 4, name: "SentimentVeryDissatisfied", icon: <SentimentVeryDissatisfiedIcon />},
    ]

    return (
        <>
            <Head>
                <title>Create Next App</title>
                <meta name="description" content="Generated by create next app" />
                <meta name="viewport" content="width=device-width, initial-scale=1" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <main className={styles.main}>
                <MiniDrawer/>
                <Box sx={{
                    display: 'flex',
                    flexWrap: 'wrap',
                    flexDirection: 'column',
                    justifyContent: 'flex-end',
                    alignItems: 'center',
                    paddingTop: '4rem',
                    paddingLeft: '2rem'
                }}>
                    <img src={"/logo.png"} style={{
                        width: 120,
                        height: 120,
                        margin: 20
                    }}/>
                    <Typography variant="h6" gutterBottom>
                        소소식탁
                    </Typography>
                    <MainModal/>

                    <div>
                        {iconsList.map(kind => (
                            <IconButton
                                key={kind.id}
                                type="button"
                                aria-label={kind.name}
                                onClick={(e)=>{handleIconClick(kind.id, kind.icon)}}
                            >
                                {kind.icon}
                            </IconButton>
                        ))}
                    </div>
                    <Paper
                        component="form"
                        sx={{ p: '2px 4px', display: 'flex', alignItems: 'center', width: 4/5 }}
                    >
                        <InputBase
                            sx={{ ml: 1, flex: 1 }}
                            placeholder="add"
                            value={chipsName}
                            inputProps={{ 'aria-label': 'add' }}
                            onChange={(e) => setChipsName(e.target.value)}
                        />
                        <IconButton
                            type="button"
                            sx={{ p: '10px' }}
                            aria-label="search"
                            onClick={()=>{
                                onCreateChip(chipsName, icons)
                            }}
                        >
                            <Search

                            />
                        </IconButton>
                    </Paper>





                    <Box sx={{
                        display: 'flex',
                        flexWrap: 'wrap',
                        flexDirection: 'row',
                        justifyContent: 'center',
                        alignItems: 'center',
                        margin: '10px'
                    }}>
                        {/*

                        <Badge badgeContent={4} color="primary" style={{
                            margin: 10
                        }}>
                            <Chip
                                icon={<Face />}
                                label="팥붕"
                                onClick={onIncrease}
                                onDelete={handleDelete}
                            />
                        </Badge>
                        <Badge badgeContent={4} color="primary" style={{
                            margin: 10
                        }}>
                            <Chip
                                label="데이먼스 이어"
                                onClick={onIncrease}
                                onDelete={handleDelete}
                            />
                        </Badge>
                        <Badge badgeContent={4} color="primary" style={{
                            margin: 10
                        }}>
                            <Chip
                                label="매운거"
                                onClick={handleClick}
                                onDelete={handleDelete}
                            />
                        </Badge>



                        {
                            info.tag.map((element: Info | any, index: number) => (
                                <Badge
                                    badgeContent={count[index]}
                                    color="primary"
                                    key={index}
                                    style={{
                                        margin: 10
                                    }}>
                                    <Chip
                                        label={element.value + index}
                                        onClick={() => handleClick(index)}
                                        onDelete={() => handleDelete(index)}
                                    />
                                </Badge>
                            ))
                        }
                    */}

                        {
                            chips.map((chip, index) => (
                                <Badge
                                    badgeContent={chip.count}
                                    color="primary"
                                    key={chip.id}
                                    style={{
                                        margin: 10
                                    }}>
                                    <Chip
                                        label={chip.name}
                                        onClick={() => handleClick(index)}
                                        onDelete={() => handleDelete(chip.id)}
                                    />
                                </Badge>
                            ))
                        }

                    </Box>
                </Box>
            </main>
        </>
    )
}

