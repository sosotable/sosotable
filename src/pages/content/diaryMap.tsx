import Head from 'next/head'
import Image from 'next/image'
import { Inter } from '@next/font/google'
import styles from '@/styles/Home.module.css'
import Avatar from '@mui/material/Avatar';
import Button from '@mui/material/Button';
import CssBaseline from '@mui/material/CssBaseline';
import TextField from '@mui/material/TextField';
import FormControlLabel from '@mui/material/FormControlLabel';
import Checkbox from '@mui/material/Checkbox';
import Link from '@mui/material/Link';
import Grid from '@mui/material/Grid';
import Box from '@mui/material/Box';
import Typography from '@mui/material/Typography';
import Container from '@mui/material/Container';
import { createTheme, ThemeProvider } from '@mui/material/styles';
import {useRouter} from 'next/router'
import { useAppDispatch, useAppSelector, setInfo, addTag, increaseTagCount } from "@/components/store";
import {Badge, Chip, Divider, IconButton, InputBase, ListItemAvatar, Paper, Switch} from "@mui/material";
import {Menu, Search, Directions, Favorite, Face, Inbox, Drafts} from "@mui/icons-material";
import MiniDrawer from "@/components/drawer";
import {SetStateAction, useEffect, useState} from "react";
import MainModal from "@/components/modal/mainModal";
import * as React from "react";
import FriendSearchModal from "@/components/modal/friendSearchModal";
import List from "@mui/material/List";
import ListItem from "@mui/material/ListItem";
import ListItemText from "@mui/material/ListItemText";
import ListItemButton from "@mui/material/ListItemButton";
import {Map, MapMarker} from "react-kakao-maps-sdk";
import Marker = daum.maps.Marker;
import {any} from "prop-types";
import Slide from '@mui/material/Slide';
import { Theme } from '@mui/material/styles';
import { FixedSizeList, ListChildComponentProps } from 'react-window';
import ListItemIcon from "@mui/material/ListItemIcon";
import PlacesSearchResultItem = daum.maps.services.PlacesSearchResultItem;

const inter = Inter({ subsets: ['latin'] })

interface Info {
    id: string,
    password: string,
    nickname: string,
    tag: []
}

export default function DiaryMap() {
    function renderRow(props: ListChildComponentProps) {
        const { index, style } = props;
        if(searchList == undefined) {
            return <></>
        }
        console.log(searchList)
        return (
            <ListItem style={style} key={index} component="div" disablePadding>
                <ListItemButton>
                    <ListItemText primary={`Item ${searchList[index].place_name}`} />
                </ListItemButton>
            </ListItem>
        );
    }
    const router = useRouter()
    const dispatch = useAppDispatch()
    const handleClick = (...rest: any[]) => {
        const index = rest[0]
        dispatch(increaseTagCount(index))
    };

    const [info, setInfo] = useState<any>()
    const [searchText, setSearchText] = useState<string>()
    const [markers, setMarkers] = useState([])
    const [map, setMap] = useState<any>()

    const [checked, setChecked] = React.useState(false);
    const [searchList, setSearchList] = useState<PlacesSearchResultItem[] | any[]>()
    const containerRef = React.useRef(null);

    const [searchResult, setSearchResult] = useState<boolean>(false)

    const handleChange = () => {
        setChecked((prev) => !prev);
    };

    const handleSearch = () => {
        if (!map) return
        const ps = new kakao.maps.services.Places()
        ps.keywordSearch(String(searchText), (data, status, _pagination) => {
            if (status === kakao.maps.services.Status.OK) {
                // MARK: 검색 이후 슬라이드 내리기
                checked ? handleChange() : false
                // MARK: 결과 확인 보이도록 함
                setSearchResult(true)
                // 검색된 장소 위치를 기준으로 지도 범위를 재설정하기위해
                // LatLngBounds 객체에 좌표를 추가합니다
                const bounds = new kakao.maps.LatLngBounds()
                let markers: SetStateAction<never[]> = []
                setSearchList(data)
                for (let i = 0; i < data.length; i++) {
                    // @ts-ignore
                    markers.push({
                        position: {
                            lat: data[i].y,
                            lng: data[i].x,
                        },
                        content: data[i].place_name,
                    })
                    // @ts-ignore
                    bounds.extend(new kakao.maps.LatLng(data[i].y, data[i].x))
                }
                setMarkers(markers)

                // 검색된 장소 위치를 기준으로 지도 범위를 재설정합니다
                map.setBounds(bounds)
            }
        })
    }
    return (
        <>
            <Head>
                <title>Create Next App</title>
                <meta name="description" content="Generated by create next app" />
                <meta name="viewport" content="width=device-width, initial-scale=1" />
                <link rel="icon" href="/favicon.ico" />
            </Head>

            <main className={styles.main}>
                <MiniDrawer/>
                <Box sx={{
                    display: 'flex',
                    flexWrap: 'wrap',
                    flexDirection: 'column',
                    justifyContent: 'flex-end',
                    alignItems: 'center',
                    paddingTop: '3rem',
                    paddingLeft: '3rem'
                }}>
                    <Map // 로드뷰를 표시할 Container
                        center={{
                            lat: 37.566826,
                            lng: 126.9786567,
                        }}
                        style={{
                            // 지도의 크기
                            width: "100vh",
                            height: "100vh",
                            zIndex: '1'
                        }}
                        level={3}
                        onCreate={setMap}
                    >
                        {markers.map((marker: any) => (
                            <MapMarker
                                key={`marker-${marker.content}-${marker.position.lat},${marker.position.lng}`}
                                position={marker.position}
                                onClick={() => setInfo(marker)}
                            >
                                {info && info.content === marker.content && (
                                    <div style={{color:"#000"}}>{marker.content}</div>
                                )}
                            </MapMarker>
                        ))}
                    </Map>
                    <Paper
                        component="form"
                        sx={{ position: 'absolute', top: '5rem', width: 4/5, zIndex: '2' }}
                    >
                        <Box sx={{
                            display: 'flex',
                            flexDirection: 'row',
                            justifyContent: 'space-between'
                        }}>

                            <InputBase
                                sx={{ ml: 1, width: 4/5 }}
                                placeholder="장소를 찾아보세요"
                                inputProps={{
                                    'aria-label': 'search kakao maps',
                                    maxLength: 20
                                }}
                                onChange={(e)=>{setSearchText(e.target.value)}}
                            />
                            <IconButton
                                type="button"
                                sx={{ p: '10px' }}
                                aria-label="search"
                                onClick={handleSearch}
                            >
                                <Search/>
                            </IconButton>
                        </Box>
                    </Paper>
                    {
                        searchResult ? (
                            <>
                                <Box sx={{
                                    width: 1,
                                    zIndex: '2',
                                    display: 'flex',
                                    flexDirection: 'column',
                                    justifyContent: 'center',
                                    alignItems: 'center',
                                    alignContent: 'center'
                                }}>
                                    <FormControlLabel
                                        control={<Switch checked={checked} onChange={handleChange} />}
                                        label="목록 보이기"
                                        sx={{
                                            position: 'absolute',
                                            top: '8rem',
                                            left: '60%',
                                            width: 1,
                                            zIndex: '2'
                                        }}
                                    />
                                    <Slide
                                        direction="up"
                                        in={checked}
                                        container={containerRef.current}
                                        style={{
                                            position: 'absolute',
                                            bottom: 0,
                                            width: '50vh',
                                            zIndex: '2'
                                        }}
                                    >
                                        <Paper sx={{ m: 1, width: '100vh'}} elevation={4}>
                                            <FixedSizeList
                                                height={360}
                                                width={360}
                                                itemSize={46}
                                                itemCount={Number(searchList?.length)}
                                                overscanCount={5}
                                            >
                                                {renderRow}
                                            </FixedSizeList>
                                        </Paper>
                                    </Slide>
                                </Box>
                            </>
                        ) : false
                    }

                </Box>
            </main>
        </>
    )
}
